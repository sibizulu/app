{"version":3,"sources":["utils/getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","this","App","state","accounts","contract","networkId","transaction","from","to","amount","category","transactionHash","error","componentDidMount","deployedNetwork","instance","sent","eth","getAccounts","net","getId","DeepCloud","networks","Contract","abi","address","_this","setState","objectSpread","runExample","alert","runExe","_callee2","_this$state","_context2","methods","initialTransfer","utils","toWei","send","on","hash","err","Clear","location","reload","_this2","disabledStatus","_this$state2","react_default","createElement","Fragment","className","href","type","id","value","placeholder","disabled","onChange","e","target","onClick","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96eebbe5.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:9545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from 'react'\nimport DeepCloud from './contracts/DeepCloud.json'\nimport getWeb3 from './utils/getWeb3'\n\nimport './App.css'\n\nclass App extends Component {\n    state = {\n        web3: null,\n        accounts: null,\n        contract: null,\n        networkId: 0,\n        transaction: {\n            from: null,\n            to: null,\n            amount: null,\n            category: null\n        },\n        transactionHash: null,\n        error: null\n    }\n\n    componentDidMount = async () => {\n        try {\n            // Get network provider and web3 instance.\n            const web3 = await getWeb3()\n\n            // Use web3 to get the user's accounts.\n            const accounts = await web3.eth.getAccounts()\n\n            // Get the contract instance.\n            const networkId = await web3.eth.net.getId()\n\n            const deployedNetwork = DeepCloud.networks[networkId]\n\n            const instance = new web3.eth.Contract(\n                DeepCloud.abi,\n                deployedNetwork && deployedNetwork.address\n            )\n\n            // Set web3, accounts, and contract to the state, and then proceed with an\n            // example of interacting with the contract's methods.\n            this.setState(\n                {\n                    web3,\n                    accounts,\n                    networkId,\n                    contract: instance,\n                    transaction: {\n                        ...this.state.transaction,\n                        from: accounts[0]\n                    }\n                },\n                this.runExample\n            )\n        } catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n                `Failed to load web3, accounts, or contract. Check console for details.`\n            )\n            console.error(error)\n        }\n    }\n\n    runExe = async () => {\n        const { contract, transaction } = this.state\n\n        contract.methods\n            .initialTransfer(\n                transaction.category,\n                transaction.to,\n                contract.utils.toWei(transaction.amount)\n            )\n            .send({ from: transaction.from })\n            .on('transactionHash', hash => {\n                this.setState({ transactionHash: hash })\n            })\n            .on('error', err => {\n                this.setState({ error: err })\n            })\n    }\n\n    Clear = () => {\n        window.location.reload()\n    }\n\n    render() {\n        const disabledStatus =\n            this.state.transaction.to &&\n            this.state.transaction.from &&\n            this.state.transaction.amount\n                ? false\n                : true\n        const { transactionHash, error } = this.state\n        if (!this.state.web3) {\n            return <div>Loading Web3, accounts, and contract...</div>\n        }\n        return (\n            <>\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                    <div className=\"container\">\n                        <a className=\"navbar-brand\" href=\"#\">\n                            DeepCloud\n                        </a>\n\n                        <ul className=\"navbar-nav ml-auto\">\n                            <li>\n                                <span className=\"badge badge-info\">\n                                    {this.state.networkId === 1\n                                        ? 'Main Ethereum Network'\n                                        : 'Ropsten Ethereum Network'}\n                                </span>\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n\n                <div className=\"container margin-more\">\n                    <div className=\"row vertical-divider\">\n                        <div className=\"col-sm\">\n                            <h3>Investor's Supply</h3>\n                            <div className=\"form-group\">\n                                <label>From Address</label>\n                                <input\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                    id=\"toAddress\"\n                                    value={this.state.transaction.from}\n                                    placeholder=\"Enter Ethereum Wallet Address\"\n                                    disabled\n                                />\n                                <small\n                                    id=\"emailHelp\"\n                                    className=\"form-text text-muted\">\n                                    Connected ethereum wallet\n                                </small>\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label>To Address</label>\n                                <input\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                    id=\"toAddress\"\n                                    placeholder=\"Enter Ethereum Wallet Address\"\n                                    onChange={e =>\n                                        this.setState({\n                                            transaction: {\n                                                ...this.state.transaction,\n                                                to: e.target.value\n                                            }\n                                        })\n                                    }\n                                />\n                                <small\n                                    id=\"emailHelp\"\n                                    className=\"form-text text-muted\">\n                                    Ethereum wallet public address to transfer\n                                    the token.\n                                </small>\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Category</label>\n                                <select\n                                    id=\"inputState\"\n                                    className=\"form-control\"\n                                    onChange={e =>\n                                        this.setState({\n                                            transaction: {\n                                                ...this.state.transaction,\n                                                category: e.target.value\n                                            }\n                                        })\n                                    }>\n                                    <option>Choose...</option>\n\n                                    <option value=\"0\">CrowdSale</option>\n                                    <option value=\"1\">Bootstrap</option>\n                                    <option value=\"2\">Reserves</option>\n                                    <option value=\"3\">Advisors</option>\n                                    <option value=\"4\">Development</option>\n                                    <option value=\"5\">Marketing</option>\n                                </select>\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Amount</label>\n                                <input\n                                    type=\"number\"\n                                    className=\"form-control\"\n                                    id=\"amount\"\n                                    placeholder=\"Number of token\"\n                                    onChange={e =>\n                                        this.setState({\n                                            transaction: {\n                                                ...this.state.transaction,\n                                                amount: e.target.value\n                                            }\n                                        })\n                                    }\n                                />\n                                <small\n                                    id=\"emailHelp\"\n                                    className=\"form-text text-muted\">\n                                    Number of token to transfer\n                                </small>\n                            </div>\n\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-primary btn-lg\"\n                                disabled={disabledStatus}\n                                onClick={this.runExe}>\n                                Submit\n                            </button>\n                            {'   '}\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-danger btn-lg\"\n                                onClick={this.Clear}>\n                                Reset\n                            </button>\n                        </div>\n                        <div className=\"col-sm\">\n                            <h4>Transaction Status</h4>\n                            {!transactionHash &&\n                                !error && <p>No transaction created</p>}\n                            {transactionHash && (\n                                <p>\n                                    {'Check transaction '}\n                                    <a\n                                        href={\n                                            this.state.networkId === 1\n                                                ? 'https://etherscan.io/tx/' +\n                                                  transactionHash\n                                                : 'https://ropsten.etherscan.io/tx/' +\n                                                  transactionHash\n                                        }\n                                        target=\"_blank\">\n                                        Click here\n                                    </a>\n                                </p>\n                            )}\n                            {error && <p>Error : {error}</p>}\n                        </div>\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}